config = json('grid-config.json', { hash: true, leave-strings: true  })

breakpoints = config['breakpoints']
columns = config['columns']
offsets = config['offsets']
gutters = config['gutters']

$gutterXs = gutters['xs'] * 1px
$gutterSm = gutters['sm'] * 1px
$gutterMd = gutters['md'] * 1px
$gutterLg = gutters['lg'] * 1px
$gutterXl = gutters['xl'] * 1px

$offsetXs = offsets['xs'] * 1px
$offsetSm = offsets['sm'] * 1px
$offsetMd = offsets['md'] * 1px
$offsetLg = offsets['lg'] * 1px
$offsetXl = offsets['xl'] * 1px

// Ширина экрана в промежутке между двумя брейкпоинтами
xs()
  @media config.queries.xs
    {block}

sm()
  @media config.queries.sm
    {block}

md()
  @media config.queries.md
    {block}

lg()
  @media config.queries.lg
    {block}

xl()
  @media config.queries.xl
    {block}

// Ширина экрана МЕНЬШЕ, чем указанное значение
lt-md()
  @media config.queries.lt-md
    {block}

lt-lg()
  @media config.queries.lt-lg
    {block}

lt-xl()
  @media config.queries.lt-xl
    {block}

// Ширина экрана БОЛЬШЕ, чем указанное значение
gt-sm()
  @media config.queries.gt-sm
    {block}

gt-md()
  @media config.queries.gt-md
    {block}

gt-lg()
  @media config.queries.gt-lg
    {block}

// базовый миксин для задания размеров элементу
grid-column($colsCount, $gutter, $size)
  $gutter = $gutter * 1px
  $gutters = ($colsCount - 1) * $gutter
  $innerGutters = ((ceil($size) - 1) > 0 ? (ceil($size) - 1) : 0) * $gutter

  return 'calc((((100% - %s) / %s) * %s) + %s)' % ($gutters $colsCount $size $innerGutters)

// базовый миксин для задания оффсета элементу
grid-column-offset($colsCount, $gutter, $size)
  $gutter = $gutter * 1px
  $gutters = ($colsCount - 1) * $gutter
  $guttersOffset = ($size) * $gutter

  return 'calc((((100% - %s) / %s) * %s) + %s)' % ($gutters $colsCount $size $guttersOffset)

// сколько колонок занимает элемент на каждом конкретном брейкпоинте
grid-size($xs, $sm, $md, $lg, $xl, $prop = 'width')
  +xs()
    {$prop} grid-column(columns['xs'], gutters['xs'], $xs)
  +sm()
    {$prop} grid-column(columns['sm'], gutters['sm'], $sm)
  +md()
    {$prop} grid-column(columns['md'], gutters['md'], $md)
  +lg()
    {$prop} grid-column(columns['lg'], gutters['lg'], $lg)
  +xl()
    {$prop} grid-column(columns['xl'], gutters['xl'], $xl)

// сколько колонок отступает элемент на каждом конкретном брейкпоинте
grid-offset($xs, $sm, $md, $lg, $xl, $prop = 'margin-left')
  +xs()
    {$prop} grid-column-offset(columns['xs'], gutters['xs'], $xs)
  +sm()
    {$prop} grid-column-offset(columns['sm'], gutters['sm'], $sm)
  +md()
    {$prop} grid-column-offset(columns['md'], gutters['md'], $md)
  +lg()
    {$prop} grid-column-offset(columns['lg'], gutters['lg'], $lg)
  +xl()
    {$prop} grid-column-offset(columns['xl'], gutters['xl'], $xl)

// контейнер сетки с отступами из параметра "offsets" json-конфига
grid-container-offset($prop = 'padding-left')
  +xs()
    {$prop}: $offsetXs
  +sm()
    {$prop}: $offsetSm
  +md()
    {$prop}: $offsetMd
  +lg()
    {$prop}: $offsetLg
  +xl()
    {$prop}: $offsetXl

grid-container()
  display flex
  float none
  width 100%
  margin 0 auto

  if config.containerMaxWidth
    max-width: config.containerMaxWidth * 1px
  else
    max-width 100%

  grid-container-offset('padding-right')
  grid-container-offset('padding-left')

  &.is-fluid
    max-width 100%
